/*
 * syat-choco: a Choco extension for Declarative Statistics.
 * 
 * MIT License
 * 
 * Copyright (c) 2016 Roberto Rossi
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy 
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package org.chocosolver.samples.statistical.ttest;

import java.util.ArrayList;
import java.util.stream.IntStream;

import org.apache.mahout.math.Arrays;
import org.chocosolver.samples.AbstractProblem;
import org.chocosolver.solver.Solver;
import org.chocosolver.solver.constraints.statistical.t.tStatistic;
import org.chocosolver.solver.search.strategy.IntStrategyFactory;
import org.chocosolver.solver.search.strategy.strategy.AbstractStrategy;
import org.chocosolver.solver.variables.IntVar;
import org.chocosolver.solver.variables.RealVar;
import org.chocosolver.solver.variables.VariableFactory;

import umontreal.iro.lecuyer.probdist.StudentDist;

/**
 * This class implements a simple example illustrating the use of 
 * Student's t statistical constraints for determining whether two populations have
 * been generated by stochastic processes featuring the same mean. 
 * 
 * Further details on the underpinning theory can be found at
 * <a href="http://www.statsdirect.com/help/default.htm#parametric_methods/unpaired_t.htm">
 * Unpaired (Two Sample) t Test</a>.
 * 
 * @author Roberto Rossi
 *
 */

public class TwoSampleTTest extends AbstractProblem {
   
    /**
     * Input data
     */
    int[] dataX;
    int[] dataY;

    /**
     * Decision variables
     */
    public IntVar[] populationX;
    public IntVar[] populationY;
    
    /**
     * Ibex real constraints numerical precision
     */
    double precision = 1.e-4;
    
    /**
     * Significance level
     */
    double alpha = 0.1;
    
    public TwoSampleTTest(int[] dataX, int[] dataY){
       this.dataX = dataX;
       this.dataY = dataY;
    }

    @Override
    public void createSolver() {
        solver = new Solver("Two Sample TTest");
    }

    @Override
    public void buildModel() {
        
       /**
        * Define decision variables representing observed realisations
        */
        
        populationX = IntStream.iterate(0, i -> i + 1)
                               .limit(dataX.length)
                               .mapToObj(i -> VariableFactory.bounded("sample X "+i, dataX[i], dataX[i], solver))
                               .toArray(IntVar[]::new);
        
        populationY = IntStream.iterate(0, i -> i + 1)
                               .limit(dataY.length)
                               .mapToObj(i -> VariableFactory.bounded("sample Y "+i, dataY[i], dataY[i], solver))
                               .toArray(IntVar[]::new);
        
        /**
         * RealVar representing feasible values of Student's t statistics at prescribed confidence level
         */ 
        StudentDist tDist = new StudentDist(dataX.length + dataY.length - 2);
        RealVar t = VariableFactory.real("tStatistic", tDist.inverseF(alpha/2), tDist.inverseF(1-alpha/2), precision, solver);
        
        /**
         * Student's t statistical constraint
         */
        tStatistic.decompose("tStatistic_cons", populationX, populationY, t, precision);
    }
    
    private static IntVar[] mergeArrays(IntVar[] var1, IntVar[] var2){
    	IntVar[] var3 = new IntVar[var1.length+var2.length];
    	System.arraycopy(var1, 0, var3, 0, var1.length);
    	System.arraycopy(var2, 0, var3, var1.length, var2.length);
    	return var3;
    }

    @Override
    public void configureSearch() {
        AbstractStrategy<IntVar> strat = IntStrategyFactory.domOverWDeg(mergeArrays(populationX,populationY),2211);
        solver.set(strat);
    }

    @Override
    public void solve() {
    	StringBuilder st = new StringBuilder();
    	boolean solution = solver.findSolution();
    	ArrayList<Integer> populationXList = new ArrayList<Integer>();
    	ArrayList<Integer> populationYList = new ArrayList<Integer>();
    	do{
    		if(solution) {
    		   st.append("Found solution!");
    			for(int i = 0; i < populationX.length; i++){
    			  populationXList.add(populationX[i].getValue());
    			}
    			st.append("\n");
    			for(int i = 0; i < populationY.length; i++){
    			  populationYList.add(populationY[i].getValue());
    			}
    			st.append("X: "+Arrays.toString(populationX) + "\n");
    			st.append("Y: "+Arrays.toString(populationY) + "\n");
    		}else{
    			st.append("No solution!");
    		}
    	}while(solution = solver.nextSolution());
    	System.out.println(st.toString());
    }

    @Override
    public void prettyOut() {
       System.out.println("Two Sample TTest");
    }
    
    public static void testEqualPopulations(){
       String[] str={"-log","SILENT"};
       
       System.out.println("testEqualPopulations()");
       
       // input data
       int[] dataX = {8, 14, 6, 12, 12, 9, 10, 9, 10, 5};   //Poisson with rate 10
       int[] dataY = {9, 10, 9, 6, 11, 8, 10, 11, 14, 11};  //Poisson with rate 10
          
       TwoSampleTTest t = new TwoSampleTTest(dataX, dataY);
       t.execute(str);
    }
    
    public static void testDifferentPopulations(){
       String[] str={"-log","SILENT"};
       
       System.out.println("testDifferentPopulations()");
       
       int[] dataX = {9, 3, 7, 8, 8, 5, 8, 5, 3, 6};        //Poisson with rate 7
       int[] dataY = {9, 10, 9, 6, 11, 8, 10, 11, 14, 11};  //Poisson with rate 10
       
       TwoSampleTTest t = new TwoSampleTTest(dataX, dataY);
       t.execute(str);
    }

    public static void main(String[] args) {
       testEqualPopulations();
       testDifferentPopulations();
    }
}

